# Test rubicon-java on all supported operating systems & Python versions.
#
# First test on Python 3.5 on Ubuntu & Mac, then the rest. This is a load management strategy:
# in sprint situations, it's faster to run the tests on one platform and confirm they're likely to pass elsewhere,
# rather than start many parallel builds which will all fail for the same daft reason. Our smoke test runs on
# both Linux and macOS to avoid bookkeeping about macOS and Linux needing to test on different Python versions.
name: CI
on:
  pull_request:
    push:
      branches:
        - master

jobs:
  beefore:
    name: Pre-test checks
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        task:
        - 'flake8'
        - 'towncrier-check'
        - 'docs'
        - 'package'
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install tox
    - name: Run pre-test check
      run: |
        tox -e ${{ matrix.task }}

  smoke:
    needs: [beefore]
    name: Smoke test
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
        python-version: [3.5]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Environment - checkout code
        uses: actions/checkout@master
      - name: Environment - Setup python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Environment - Use Java 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install tox
      - name: Test
          # For the Python 3.5 and 3.7 distributions on macOS in GitHub Actions,
          # python-config --ldflags refuses to print a -L directive. We work around
          # that with the LIBRARY_PATH variable below.
        run: |
          LIBRARY_PATH="${{ env.pythonLocation }}/lib" tox -e py


  # Now test on all recent versions of Python as well.
  python-versions:
    needs: [smoke]
    name: Python compatibility test
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8]
        os: [ubuntu-18.04, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Environment - checkout code
        uses: actions/checkout@master
      - name: Environment - Setup python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Environment - Use Java 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install tox
      - name: Test
          # For the Python 3.5 and 3.7 distributions on macOS in GitHub Actions,
          # python-config --ldflags refuses to print a -L directive. We work around
          # that with the LIBRARY_PATH variable below.
        run: |
          LIBRARY_PATH="${{ env.pythonLocation }}/lib" tox -e py

  # Test on x86 (32-bit) Ubuntu 18.04, focusing on 32-bit/64-bit errors; just one Python version.
  x86:
    needs: [smoke]
    name: x86 32-bit tests
    runs-on: ubuntu-latest
    steps:
      - name: Environment - checkout code
        uses: actions/checkout@master
      - name: Install dependencies, compile rubicon-java, and run tests
        uses: docker://i386/ubuntu:18.04
        # This step does everything because changes within the container (e.g., apt-get) may be discarded between steps.
        # Inspired by: https://github.community/t5/GitHub-Actions/Workflow-fails-when-running-steps-in-a-container/td-p/29652
        with:
          entrypoint: /bin/sh
          args: -c "apt-get update && apt-get install -y build-essential python3.7-dev openjdk-8-jdk-headless && PYTHON_CONFIG=python3.7-config JAVA_HOME=/usr/lib/jvm/java-8-openjdk-i386/ make && JAVA_HOME=/usr/lib/jvm/java-8-openjdk-i386/ RUBICON_LIBRARY=build/librubicon.so LD_LIBRARY_PATH=./build java org.beeware.rubicon.test.Test"
